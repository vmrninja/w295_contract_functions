// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.7;

// Contract generated by The Smart Blocks (TM) www.thesmartblocks.com for client #2
// Options:
// Contract Type: Escrow
// Owner Role: Seller
// Contract Parties: Limited to 1 Seller and n Buyers
// Arbitrator: No
// Privilege to add parties: Anyone (can only add self)
// Parties who can retract: Anyone (self only)
// Criteria to retract: None
// Criteria for sellers pay: Seller accepts offer
// Criteria to auto-cancel: None

contract Escrow_client_2 {
    struct Buyers_table {
        uint amount;
        bool criteriaMet;
        bool buyerRetract;
        bool paid;
    }

    mapping(address => Buyers_table) public buyers;
    address public seller;
    address public arbitrator;
    bool arbitratorAdded = false;
    uint autoCancelMet;
    uint sellerCount = 0;
    address sellerID;
    bool voidContract = false;
    bool sellerPaid = false;

// Owner Role: Seller
// Criteria to auto-cancel: None

    constructor() {
        seller = msg.sender;
//      autoCancelMet = block.timestamp + 60;
    }

// Contract Parties: Limited to 1 Seller and n Buyers
// Privilege to add parties: Anyone (can only add self)

    function addBuyer() external payable {
//      require(sellerCount == 0, '** No more Sellers can be added to this contract **');
//      require(msg.sender == buyer, '** Only buyer can add Sellers **');
        require(voidContract == false, '** Contract has been voided by Seller **');
        require(buyers[msg.sender].amount == 0, '** Buyer already exists **');
        require(msg.value > 0, '** Offer price must be above zero **');
//      sellerCount = 1;
//      sellerID = seller;
        buyers[msg.sender] = Buyers_table(msg.value, false, false, false);
    }

// Arbitrator: No
// Parties who can retract: Anyone (self only)
// Criteria to retract: None

    function buyerRetract() external {
        Buyers_table storage buyer = buyers[msg.sender];
        require(buyers[msg.sender].amount != 0, '** You are not a Buyer in this contract **');
        require(buyer.paid == false, '** Seller has already been paid **');
//      require(msg.sender == buyer, '** Only buyer can retract from this contract **');
        buyer.paid = false;
        payable(msg.sender).transfer(buyer.amount);
    }

    function sellerRetract() external {
        require(msg.sender == seller, '** Only actual Seller can retract themselves **');
        require(voidContract == false, '** Contract has been voided by Seller **');
        require(sellerPaid == false, '** Seller has already been paid **');
        voidContract = true;
    }
// Criteria for sellers pay: Seller accepts the offer
// Seller claim-payment clause

    function paySeller(address acceptedBuyer) external {
        Buyers_table storage buyer = buyers[acceptedBuyer];
        require(voidContract == false, '** Contract has been voided by Seller **');
        require(buyer.amount != 0, '** This Buyer is not part of this contract **');
        require(sellerPaid == false, '** Seller has already been paid');
        sellerPaid = true;
        voidContract = true;
        buyer.paid = true;
        payable(seller).transfer(buyer.amount);
    }
}
